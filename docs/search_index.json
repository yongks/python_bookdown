[["datetime-and-timezone.html", "Chapter 9 Datetime and Timezone 9.1 Library Import 9.2 Timezone (pytz) 9.3 date and datetime 9.4 time 9.5 timedelta", " Chapter 9 Datetime and Timezone 9.1 Library Import import pytz from pytz import timezone from datetime import date, datetime, time, timedelta 9.2 Timezone (pytz) pytz is NOT a built-in library. 9.2.1 Creating Timezone MYTZ = timezone(&#39;Asia/Singapore&#39;) UTC = pytz.utc UTC2 = timezone(&#39;UTC&#39;) MYTZ UTC UTC2 ## &lt;DstTzInfo &#39;Asia/Singapore&#39; LMT+6:55:00 STD&gt; ## &lt;UTC&gt; ## &lt;UTC&gt; 9.2.1.1 Making date/datetime Timezone aware naive = datetime(2019, 8, 19, 12, 0) naive2 = datetime(2019, 8, 19) ## will be assumed with time 00:00 UTC.localize(naive) ## make datetime TZ aware MYTZ.localize(naive2) ## make date TZ aware ## datetime.datetime(2019, 8, 19, 12, 0, tzinfo=&lt;UTC&gt;) ## datetime.datetime(2019, 8, 19, 0, 0, tzinfo=&lt;DstTzInfo &#39;Asia/Singapore&#39; +08+8:00:00 STD&gt;) 9.2.2 Attributes pytz.all_timezones is a list of time zone names in string. for x in pytz.all_timezones: if x.startswith(&#39;Asia&#39;): print(x) ## Asia/Aden ## Asia/Almaty ## Asia/Amman ## Asia/Anadyr ## Asia/Aqtau ## Asia/Aqtobe ## Asia/Ashgabat ## Asia/Ashkhabad ## Asia/Atyrau ## Asia/Baghdad ## Asia/Bahrain ## Asia/Baku ## Asia/Bangkok ## Asia/Barnaul ## Asia/Beirut ## Asia/Bishkek ## Asia/Brunei ## Asia/Calcutta ## Asia/Chita ## Asia/Choibalsan ## Asia/Chongqing ## Asia/Chungking ## Asia/Colombo ## Asia/Dacca ## Asia/Damascus ## Asia/Dhaka ## Asia/Dili ## Asia/Dubai ## Asia/Dushanbe ## Asia/Famagusta ## Asia/Gaza ## Asia/Harbin ## Asia/Hebron ## Asia/Ho_Chi_Minh ## Asia/Hong_Kong ## Asia/Hovd ## Asia/Irkutsk ## Asia/Istanbul ## Asia/Jakarta ## Asia/Jayapura ## Asia/Jerusalem ## Asia/Kabul ## Asia/Kamchatka ## Asia/Karachi ## Asia/Kashgar ## Asia/Kathmandu ## Asia/Katmandu ## Asia/Khandyga ## Asia/Kolkata ## Asia/Krasnoyarsk ## Asia/Kuala_Lumpur ## Asia/Kuching ## Asia/Kuwait ## Asia/Macao ## Asia/Macau ## Asia/Magadan ## Asia/Makassar ## Asia/Manila ## Asia/Muscat ## Asia/Nicosia ## Asia/Novokuznetsk ## Asia/Novosibirsk ## Asia/Omsk ## Asia/Oral ## Asia/Phnom_Penh ## Asia/Pontianak ## Asia/Pyongyang ## Asia/Qatar ## Asia/Qostanay ## Asia/Qyzylorda ## Asia/Rangoon ## Asia/Riyadh ## Asia/Saigon ## Asia/Sakhalin ## Asia/Samarkand ## Asia/Seoul ## Asia/Shanghai ## Asia/Singapore ## Asia/Srednekolymsk ## Asia/Taipei ## Asia/Tashkent ## Asia/Tbilisi ## Asia/Tehran ## Asia/Tel_Aviv ## Asia/Thimbu ## Asia/Thimphu ## Asia/Tokyo ## Asia/Tomsk ## Asia/Ujung_Pandang ## Asia/Ulaanbaatar ## Asia/Ulan_Bator ## Asia/Urumqi ## Asia/Ust-Nera ## Asia/Vientiane ## Asia/Vladivostok ## Asia/Yakutsk ## Asia/Yangon ## Asia/Yekaterinburg ## Asia/Yerevan 9.3 date and datetime date and datetime are both standard built-in python library. datetime library contain three class of objects: date (year,month,day) time (hour,minute,second) datetime (year,month,day,hour,minute,second) timedelta: duration between two datetime or date object 9.3.1 Constructor ## Date Only date (2000,1,1) type(date (2000,1,1)) ## Datetime datetime (2000,1,1,23,15,55) datetime (year=2000,month=1,day=1,hour=23,minute=15,second=55) type(datetime(2000,1,1,0,0,0)) ## datetime.date(2000, 1, 1) ## &lt;class &#39;datetime.date&#39;&gt; ## datetime.datetime(2000, 1, 1, 23, 15, 55) ## datetime.datetime(2000, 1, 1, 23, 15, 55) ## &lt;class &#39;datetime.datetime&#39;&gt; 9.3.2 Class Method 9.3.2.1 now and today Both now() and today() return current system local datetime, no timezone utcnow() returns UTC datetime. datetime.now() ## local datetime datetime.today() ## local datetime, same as above datetime.utcnow() ## UTC datetime ## datetime.datetime(2022, 12, 29, 23, 2, 5, 228095) ## datetime.datetime(2022, 12, 29, 23, 2, 5, 239095) ## datetime.datetime(2022, 12, 29, 15, 2, 5, 244075) 9.3.2.2 combine() date and time Apply datetime.combine() module method on both date and time object to get datetime now = datetime.now() datetime.combine(now.date(), now.time()) ## datetime.datetime(2022, 12, 29, 23, 2, 5, 455865) 9.3.2.3 Convert from String strptime() Use strptime to convert string into datetime object %I : 12-hour %H : 24-hour %M : Minute %p : AM/PM %y : 18 %Y : 2018 %b : Mar %m : month (1 to 12) %d : day datetime.strptime(&#39;2011-02-25&#39;,&#39;%Y-%m-%d&#39;) ## datetime.datetime(2011, 2, 25, 0, 0) datetime.strptime(&#39;9-01-18&#39;,&#39;%d-%m-%y&#39;) ## datetime.datetime(2018, 1, 9, 0, 0) datetime.strptime(&#39;09-Mar-2018&#39;,&#39;%d-%b-%Y&#39;) ## datetime.datetime(2018, 3, 9, 0, 0) datetime.strptime(&#39;2/5/2018 4:49 PM&#39;, &#39;%m/%d/%Y %I:%M %p&#39;) ## datetime.datetime(2018, 2, 5, 16, 49) 9.3.2.4 Convert from ISO fromisoformat fromisoformat() is intend to be reverse of isoformat() It actually not ISO compliance: when Z or +8 is included at the end of the string, error occur #s = dt.datetime.now().isoformat() datetime.fromisoformat(&quot;2019-02-05T10:22:33&quot;) ## datetime.datetime(2019, 2, 5, 10, 22, 33) 9.3.3 Instance Method 9.3.3.1 weekday datetime.now().weekday() ## 3 9.3.3.2 replace datetime.now().replace(year=1999) ## datetime.datetime(1999, 12, 29, 23, 2, 6, 992951) 9.3.3.3 convert to .time() datetime.now().time() ## datetime.time(23, 2, 7, 166590) 9.3.3.4 Convert to .date() datetime.now().date() ## datetime.date(2022, 12, 29) 9.3.3.5 Convert to String str str( datetime.now() ) ## &#39;2022-12-29 23:02:07.518930&#39; Use strftime() datetime.now().strftime(&#39;%d-%b-%Y&#39;) ## &#39;29-Dec-2022&#39; datetime.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%S.%fZ&#39;) ## ISO 8601 UTC ## &#39;2022-12-29T15:02:07.873183Z&#39; Use isoformat() datetime.utcnow().isoformat() ## &#39;2022-12-29T15:02:08.047623&#39; 9.3.4 Attributes datetime.now().year datetime.now().month datetime.now().day datetime.now().hour datetime.now().minute ## 2022 ## 12 ## 29 ## 23 ## 2 9.4 time 9.4.1 Constructor print( time(2) ) #default single arugement, hour print( time(2,15) ) #default two arguments, hour, minute print( time(hour=2,minute=15,second=30) ) ## 02:00:00 ## 02:15:00 ## 02:15:30 9.4.2 Class Method 9.4.2.1 now() There is unfortunately no single function to extract the current time. Use time() function of an datetime object datetime.now().time() ## datetime.time(23, 2, 8, 635465) 9.4.3 Attributes datetime.now().time().hour datetime.now().time().minute datetime.now().time().second ## 23 ## 2 ## 8 9.5 timedelta years argument is not supported Apply timedelta on datetime object timedelta cannot be applied on time object , because timedelta potentially go beyond single day (24H) delt = timedelta(days=365,minutes=33,seconds=15) now = datetime.now() print (&#39;delt+now : &#39;, now+delt) ## delt+now : 2023-12-29 23:35:24.191134 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
